Практическое задание 2.
Практические задачи для матриц с единым интерфейсом.
Про структуру SparseMatrix и DenseMatrix стоит читать в ридми для первого практического задания.
Главное отличие класса SparseMatrix от DenseMatrix заключается в том, что для второго класса в конструктуре прописана
инициализация всех элементов, в остальном они ничем не отличаются и поэтому я написал эти классы в виде макроподстановки.
Класс IterableSquareMatrix - интерфейс для разных представлений графа 
(в виде полной и разреженной матрицы смежности)
Методы:
virtual Iterator iterate_rows(size_t) const = 0;
возвращает итератор, указывающий на первый элемент строки
(ненулевой для разреженной, любой для полной)
virtual Iterator iterate_columns(size_t) const = 0;
возвращает итератор, указывающий на первый элемент столбца
(ненулевой для разреженной, любой для полной)
virtual Iterator end_rows(size_t) const = 0;
возвращает итератор, указывающий на следующий после последнего элемент строки
virtual Iterator end_columns(size_t) const = 0;
возвращает итератор, указывающий на следующий после последнего элемент столбца
virtual size_t size() const = 0;
метод возвращает размер матрицы
virtual void set(size_t a, size_t b, double value) const = 0;
для удобного заполнения матрицы смежности.
IterableSparseMatrix- класс представления графа в виде разреженной матрицы смежности
поле данных состоит из указателя на разреженную матрицу смежности
его методы - как у интерфейса IterableSquareMatrix
IterableDenseMatrix - класс представления графа в виде полной матрицы смежности
поле данных состоит из указателя на полную матрицу смежности
его методы - как у интерфейса IterableSquareMatrix
class Iterator - это класс, объектами которого являются константные итераторы класса IterableSquareMatrix.
его поля данных:
bool flag; - true, если проход по столбцам, false, если иначе
IterableSparseMatrix *ISM; 
IterableDenseMatrix *IDM;- Матрицы, которые рассматривает(один указатель обязательно нулевой)
size_t n_string; - номер строки, на которой итератор
List* list; - элемент матрицы
std::set<size_t> BFS(IterableSquareMatrix& M, size_t k);
обход в ширину для вершины с номером k графа, представленного в виде матрицы M, возвращает множество вершин, в которые можно попасть из к-ой
size_t connect_comp(IterableSquareMatrix &M);
возвращает число компонент связности графа, представленного в виде матрицы M
size_t short_way(IterableSquareMatrix& M, size_t ver1, size_t ver2, std::set <size_t>& val);
функция возвращает длину наикратчайшего путя между вершинами с номерами ver1 и ver2 графа, представленного в виде матрицы M, последний параметр - множество, необходимо для правильной работы рекурсии, изначально передается пустое
size_t diameter(IterableSquareMatrix& M);
возвращает значение диаметра графа, представленного в виде матрицы M.
